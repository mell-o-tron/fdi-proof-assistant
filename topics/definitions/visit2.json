{
  "definition": {
    "name": "visit2",
    "is_function": "true",
    "arity": 1,
    "display_name": "visit2",
    "text": {
      "english": "Let \\( \\texttt {visit2} : BT_A \\to L_A \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{visit2}(\\lambda) = [] \\)</li><li>Inductive Clause: \\( \\texttt{visit2}(N(t_1,a,t_2) = a :: \\texttt{app}(\\texttt{visit2}(t_1),\\texttt{visit2}(t_2))\\)</li></ul>",
      "italiano": "Sia \\( \\texttt {visit2} : BT_A \\to L_A \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{visit2}(\\lambda) = [] \\)</li><li>Clausola Induttiva: \\( \\texttt{visit2}(N(t_1,a,t_2) = a :: \\texttt{app}(\\texttt{visit2}(t_1),\\texttt{visit2}(t_2))\\)</li></ul>"
    },
    "coq": "Fixpoint visit2 {A : Type} (t : bte A) : list A := match t with | lmd => [] | N t1 a t2 => a :: app (visit2 t1) (visit2 t2) end.\n"
  },
  "theorems": [
    {
      "name": "visit2_base_clause",
      "display_name": {
        "english": "visit2 (base clause)",
        "italiano": "visit2 (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{visit2}\\):\n\n\\[ \\texttt{visit2}(\\lambda) = [] \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{visit2}\\):\n\n\\[ \\texttt{visit2}(\\lambda) = [] \\]"
      },
      "coq": "Theorem visit2_base_clause : forall {A : Type} ,  @visit2 A lmd = [].\nProof.\nreflexivity.\nQed.\n"
    },
    {
      "name": "visit2_inductive_clause",
      "display_name": {
        "english": "visit2 (inductive clause)",
        "italiano": "visit2 (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{visit2}\\):\n\n\\begin{gather*} \\forall t_1,t_2 \\in L_A .\\; \\forall a \\in A .\\\\ \\texttt{visit2}(N(t_1, a, t_2)) =\\\\ a :: \\texttt{app}(\\texttt{visit2}(t_1), \\texttt{visit2}(t_2)) \\end{gather*}",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{visit2}\\):\n\n\\begin{gather*} \\forall t_1,t_2 \\in L_A .\\; \\forall a \\in A .\\\\ \\texttt{visit2}(N(t_1, a, t_2)) =\\\\ a :: \\texttt{app}(\\texttt{visit2}(t_1), \\texttt{visit2}(t_2)) \\end{gather*}"
      },
      "coq": "Theorem visit2_inductive_clause : forall {A : Type} (t1 t2 : bte A) (a : A) , visit2 (N t1 a t2) = a :: app (visit2 t1) (visit2 t2).\nProof.\nreflexivity.\nQed.\n"
    }
  ]
}
