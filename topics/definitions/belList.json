{
  "definition": {
    "name": "belList",
    "is_function": "true",
    "arity": 2,
    "display_name": "belList",
    "text": {
      "english": "Let \\( \\texttt {belList} : L_A \\times A \\to Bool \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{belList}([], b) = \\texttt{false} \\)</li><li>Inductive Clause: \\( \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\)</li></ul>",
      "italiano": "Sia \\( \\texttt {belList} : L_A \\times A \\to Bool \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{belList}([], b) = \\texttt{false} \\)</li><li>Clausola Induttiva: \\( \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases}\\)</li></ul>"
    },
    "coq": "Fixpoint belList (l : list A) (b : A) : Bool := match l with | [] => false | a::l' => if a == b then true else belList l' b end.\n"
  },
  "theorems": [
    {
      "name": "belList_base_clause",
      "display_name": {
        "english": "belList (base clause)",
        "italiano": "belList (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{belList}\\):\\[ \\forall b \\in A .\\; \\texttt{belList}([], b) = \\texttt{false} \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{belList}\\):\\[ \\forall b \\in A .\\; \\texttt{belList}([], b) = \\texttt{false} \\]"
      },
      "coq": "Theorem belList_base_clause : forall (b : A), belList [] b = false.\nProof.\nAdmitted."
    },
    {
      "name": "belList_inductive_clause",
      "display_name": {
        "english": "belList (inductive clause)",
        "italiano": "belList (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{belList}\\): \\begin{multline} \\forall l \\in L_A.\\; \\forall a,b \\in A .\\\\ \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\end{multline}",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{belList}\\): \\begin{multline} \\forall l \\in L_A.\\; \\forall a,b \\in A .\\\\ \\texttt{belList}(a :: l, b) = \\begin{cases} \\texttt{true} & \\text{if}\\; a == b\\\\ \\texttt{belList}(l, b) & \\text{otherwise}\\end{cases} \\end{multline}"
      },
      "coq": "Theorem belList_inductive_clause : forall (l : list A) (a b : A) , belList (a :: l) b = if a == b then true else belList l b.\nProof.\nAdmitted."
    }
  ]
}
