{
  "definition": {
    "name": "sumList",
    "is_function": "true",
    "arity": 1,
    "display_name": "sumList",
    "text": {
      "english": "Let \\( \\texttt {sumList} : L_\\mathbb{N} \\to \\mathbb{N} \\) be defined as follows:<ul style=\"padding : 15px;\"><li>Base Clause: \\( \\texttt{sumList}([]) = 0 \\)</li><li>Inductive Clause: \\( \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\)</li></ul>",
      "italiano": "Sia \\( \\texttt {sumList} : L_\\mathbb{N} \\to \\mathbb{N} \\) definita come segue:<ul style=\"padding : 15px;\"><li>Clausola Base: \\( \\texttt{sumList}([]) = 0 \\)</li><li>Clausola Induttiva: \\( \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\)</li></ul>"
    },
    "coq": "Fixpoint sumList (l : list nat) : nat := match l with | [] => 0 | n :: l => sumList l + n end.\n"
  },
  "theorems": [
    {
      "name": "sumList_base_clause",
      "display_name": {
        "english": "sumList (base clause)",
        "italiano": "sumList (clausola base)"
      },
      "text": {
        "english": "Base clause of definition of \\(\\texttt{sumList}\\):\\[ \\texttt{sumList}([]) = 0 \\]",
        "italiano": "Clausola base della definizione di \\(\\texttt{sumList}\\):\\[ \\texttt{sumList}([]) = 0 \\]"
      },
      "coq": "Theorem sumList_base_clause : sumList [] = 0.\nProof.\nreflexivity.\nQed."
    },
    {
      "name": "sumList_inductive_clause",
      "display_name": {
        "english": "sumList (inductive clause)",
        "italiano": "sumList (clausola induttiva)"
      },
      "text": {
        "english": "Inductive clause of the definition of \\(\\texttt{sumList}\\): \\begin{multline} \\forall l \\in L_\\mathbb{N}.\\; \\forall n \\in \\mathbb{N} .\\\\ \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\end{multline}",
        "italiano": "Clausola induttiva della definizione di \\(\\texttt{sumList}\\): \\begin{multline} \\forall l \\in L_\\mathbb{N}.\\; \\forall n \\in \\mathbb{N} .\\\\ \\texttt{sumList}(n :: l) = \\texttt{sumList}(l) + n \\end{multline}"
      },
      "coq": "Theorem sumList_inductive_clause : forall (l : list nat) (n : nat), sumList (n :: l) = sumList l + n.\nProof.\nreflexivity.\nQed."
    }
  ]
}
